version: '3'

networks:
  backend:
    driver: ${NETWORKS_DRIVER}

volumes:
  mysql:
    driver: ${VOLUMES_DRIVER}
  gogs:
    driver: ${VOLUMES_DRIVER}

services:

### MySQL ################################################
    mysql:
      build:
        context: ./mysql
        args:
          - MYSQL_VERSION=${MYSQL_VERSION}
      environment:
        - MYSQL_DATABASE=${MYSQL_DATABASE}
        - MYSQL_USER=${MYSQL_USER}
        - MYSQL_PASSWORD=${MYSQL_PASSWORD}
        - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
        - TZ=${MYSQL_TIMEZONE}
      restart: always
      volumes:
        - ${DATA_PATH_HOST}/mysql:/var/lib/mysql
        - ${MYSQL_ENTRYPOINT_INITDB}:/docker-entrypoint-initdb.d
      ports:
        - "${MYSQL_PORT}:3306"
      networks:
        - backend

### gogs ###########################################
    gogs:
      build: ./gogs
      restart: always
      volumes:
        - ${DATA_PATH_HOST}/gogs:/data
      ports:
        - "${GOGS_HTTP_PORT}:3000"
        - "${GOGS_SSH_PORT}:22"
      networks:
        - backend

### drone-server ###########################################
    drone-server:
        image: drone/drone:0.8
        ports:
          - 10081:8000
          - 9000
        volumes:
          - ./drone:/var/lib/drone/
          - /tmp/cache:/cache
        restart: always
        environment:
          - DRONE_OPEN=true
          - DRONE_DEBUG=false
          - DRONE_DATABASE_DRIVER=mysql
          - DRONE_DATABASE_DATASOURCE=${MYSQL_USER}:${MYSQL_PASSWORD}@tcp(mysql:3306)/drone?parseTime=true
          - DRONE_GOGS=true
          - DRONE_GOGS_URL=http://gogs:10080
          - DRONE_GOGS_PRIVATE_MODE=true
          - DRONE_GOGS_SKIP_VERIFY=true
          - DRONE_SECRET=secret
          - DRONE_ADMIN=v
          - DRONE_HOST=http://gogs
          - GIN_MODE=release
        networks:
          - backend
### drone-agent ###########################################
    drone-agent:
        image: drone/agent:0.8
        command: agent
        restart: always
        depends_on: [ drone-server ]
        volumes:
          - /var/run/docker.sock:/var/run/docker.sock
          - /tmp/cache:/cache
        environment:
          - DRONE_SERVER=drone-server:9000
          - DRONE_SECRET=secret
          - DRONE_HOST=http://gogs
        networks:
          - backend